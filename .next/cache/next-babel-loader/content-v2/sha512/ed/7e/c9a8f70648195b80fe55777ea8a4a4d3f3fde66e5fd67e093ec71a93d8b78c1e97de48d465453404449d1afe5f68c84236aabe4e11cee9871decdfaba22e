{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ranja\\\\Downloads\\\\autify-assessment\\\\pages\\\\[repoId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport RepoDetail from \"../../components/repositories/RepoDetail\";\nimport Head from 'next/head';\n\nfunction RepoDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.repoData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.repoData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(RepoDetail, {\n      image: props.repoData.image,\n      name: props.repoData.name,\n      url: props.repoData.url,\n      description: props.repoData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_c = RepoDetails;\nexport var __N_SSG = true;\nexport default RepoDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"RepoDetails\");","map":{"version":3,"sources":["C:/Users/ranja/Downloads/autify-assessment/pages/[repoId]/index.js"],"names":["Fragment","RepoDetail","Head","RepoDetails","props","repoData","name","description","image","url"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AACvB,sBACI,QAAC,QAAD;AAAA,4BACA,QAAC,IAAD;AAAA,8BACA;AAAA,kBAAQA,KAAK,CAACC,QAAN,CAAeC;AAAvB;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AACA,QAAA,IAAI,EAAC,aADL;AAEA,QAAA,OAAO,EAAEF,KAAK,CAACC,QAAN,CAAeE;AAFxB;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAQA,QAAC,UAAD;AACA,MAAA,KAAK,EAAEH,KAAK,CAACC,QAAN,CAAeG,KADtB;AAEA,MAAA,IAAI,EAAEJ,KAAK,CAACC,QAAN,CAAeC,IAFrB;AAGA,MAAA,GAAG,EAAEF,KAAK,CAACC,QAAN,CAAeI,GAHpB;AAIA,MAAA,WAAW,EAAEL,KAAK,CAACC,QAAN,CAAeE;AAJ5B;AAAA;AAAA;AAAA;AAAA,YARA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;KAlBQJ,W;;AAkIT,eAAeA,WAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport RepoDetail from \"../../components/repositories/RepoDetail\";\r\nimport Head from 'next/head';\r\nimport { ApolloClient, InMemoryCache, gql, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nfunction RepoDetails(props){\r\n    return(\r\n        <Fragment>\r\n        <Head>\r\n        <title>{props.repoData.name}</title>\r\n        <meta \r\n        name=\"description\"\r\n        content={props.repoData.description}\r\n        /> \r\n        </Head>\r\n        <RepoDetail \r\n        image={props.repoData.image}\r\n        name={props.repoData.name}\r\n        url={props.repoData.url}\r\n        description={props.repoData.description}\r\n        />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths(){\r\n    const httpLink = createHttpLink({\r\n        uri: 'https://api.github.com/graphql',\r\n      });\r\n      \r\n      const authLink = setContext((_, { headers }) => {\r\n        return {\r\n          headers: {\r\n            ...headers,\r\n            authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\r\n          }\r\n        }\r\n      });\r\n      \r\n      const client = new ApolloClient({\r\n        link: authLink.concat(httpLink),\r\n        cache: new InMemoryCache()\r\n      });\r\n    \r\n    const { data } =  await client.query({\r\n        query: gql`\r\n        {\r\n          user(login: \"ranjanmanish95\") {\r\n            pinnableItems(first: 13) {\r\n              totalCount\r\n              edges {\r\n                node {\r\n                  ... on Repository {\r\n                    id\r\n                    name\r\n                    url\r\n                    description\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }  \r\n        `\r\n      })\r\n     console.log(data);\r\n     const {user} = data;\r\n     const repos = user.pinnableItems.edges.map(({node})=> node);\r\n    return {\r\n        fallback: 'blocking',\r\n        paths: repos.map((repo)=>({\r\n        params:{ repoId: repo.id.toString() } })),\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n    //fetch data for a single meetup\r\n const repoId = context.params.repoId;\r\nconst httpLink = createHttpLink({\r\n    uri: 'https://api.github.com/graphql',\r\n  });\r\n  \r\n  const authLink = setContext((_, { headers }) => {\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\r\n      }\r\n    }\r\n  });\r\n  \r\n  const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\nconst { data } =  await client.query({\r\n    query: gql`\r\n    {\r\n      user(login: \"ranjanmanish95\") {\r\n        pinnableItems(first: 13) {\r\n          totalCount\r\n          edges {\r\n            node {\r\n              ... on Repository {\r\n                id\r\n                name\r\n                url\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }  \r\n    `\r\n  })\r\n//  console.log(data);\r\n const {user} = data;\r\n const repos = user.pinnableItems.edges.map(({node})=> node);\r\n const selectedRepo = repos.find((repo)=>repo.id === repoId);\r\n\r\n    return {\r\n        props:{\r\n            repoData: {\r\n                id: selectedRepo.id.toString(),\r\n                name: selectedRepo.name,\r\n                url: selectedRepo.url,\r\n                image: \"https://pngimg.com/uploads/github/github_PNG28.png\",\r\n                description: selectedRepo.description\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nexport default RepoDetails;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment } from \"react\";\nimport RepoDetail from \"../../components/repositories/RepoDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head'; // function RepoDetails(props){\n//     return(\n//         <Fragment>\n//         <Head>\n//         <title>{props.repoData.title}</title>\n//         <meta \n//         name=\"description\"\n//         content={props.repoData.description}\n//         /> \n//         </Head>\n//         <RepoDetail \n//         image={props.repoData.image}\n//         title={props.repoData.title}\n//         address={props.repoData.address}\n//         description={props.repoData.description}\n//         />\n//         </Fragment>\n//     )\n// }\n// export async function getStaticPaths(){\n//     const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\n//     const db = client.db();\n//     const repoCollection = db.collection('meetups');\n//     const repos = await repoCollection.find({}, {_id: 1}).toArray();\n//     client.close();\n//     return {\n//         fallback: 'blocking',\n//         paths: repos.map((repo)=>({\n//         params:{ repoId: repo._id.toString() } })),\n//     }\n// }\n// export async function getStaticProps(context){\n//     //fetch data for a single meetup\n//  const repoId = context.params.repoId;\n//  const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\n//  const db = client.db();\n//  const repoCollection = db.collection('meetups');\n//  const selectedRepo = await repoCollection.findOne({_id: new ObjectId(repoId)});\n//  client.close();\n//     return {\n//         props:{\n//             repoData: {\n//                 _id: selectedRepo._id.toString(),\n//                 title: selectedRepo.title,\n//                 address: selectedRepo.address,\n//                 image: selectedRepo.image,\n//                 description: selectedRepo.description\n//             },\n//         }\n//     }\n// }\n// export default RepoDetails;","map":{"version":3,"sources":["C:/Users/ranja/Downloads/autify-assessment/pages/[repoId]/index.js"],"names":["Fragment","RepoDetail","MongoClient","ObjectId","Head"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { Fragment } from \"react\";\r\nimport RepoDetail from \"../../components/repositories/RepoDetail\";\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\nimport Head from 'next/head';\r\n\r\n// function RepoDetails(props){\r\n//     return(\r\n//         <Fragment>\r\n//         <Head>\r\n//         <title>{props.repoData.title}</title>\r\n//         <meta \r\n//         name=\"description\"\r\n//         content={props.repoData.description}\r\n//         /> \r\n//         </Head>\r\n//         <RepoDetail \r\n//         image={props.repoData.image}\r\n//         title={props.repoData.title}\r\n//         address={props.repoData.address}\r\n//         description={props.repoData.description}\r\n//         />\r\n//         </Fragment>\r\n//     )\r\n// }\r\n\r\n// export async function getStaticPaths(){\r\n//     const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\r\n//     const db = client.db();\r\n//     const repoCollection = db.collection('meetups');\r\n//     const repos = await repoCollection.find({}, {_id: 1}).toArray();\r\n//     client.close();\r\n//     return {\r\n//         fallback: 'blocking',\r\n//         paths: repos.map((repo)=>({\r\n//         params:{ repoId: repo._id.toString() } })),\r\n\r\n//     }\r\n// }\r\n\r\n// export async function getStaticProps(context){\r\n//     //fetch data for a single meetup\r\n//  const repoId = context.params.repoId;\r\n//  const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\r\n//  const db = client.db();\r\n//  const repoCollection = db.collection('meetups');\r\n//  const selectedRepo = await repoCollection.findOne({_id: new ObjectId(repoId)});\r\n//  client.close();\r\n//     return {\r\n//         props:{\r\n//             repoData: {\r\n//                 _id: selectedRepo._id.toString(),\r\n//                 title: selectedRepo.title,\r\n//                 address: selectedRepo.address,\r\n//                 image: selectedRepo.image,\r\n//                 description: selectedRepo.description\r\n//             },\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default RepoDetails;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ranja\\\\Downloads\\\\autify-assessment\\\\pages\\\\[repoId]\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from \"react\";\nimport RepoDetail from \"../../components/repositories/RepoDetail\";\nimport Head from 'next/head';\nimport { ApolloClient, InMemoryCache, gql, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nfunction RepoDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.repoData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.repoData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(RepoDetail, {\n      image: props.repoData.image,\n      name: props.repoData.name,\n      url: props.repoData.url,\n      description: props.repoData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  // const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\n  // const db = client.db();\n  // const repoCollection = db.collection('meetups');\n  // const repos = await repoCollection.find({}, {_id: 1}).toArray();\n  // client.close();\n  const httpLink = createHttpLink({\n    uri: 'https://api.github.com/graphql'\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`\n      })\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n  const {\n    data\n  } = await client.query({\n    query: gql`\n        {\n          user(login: \"ranjanmanish95\") {\n            pinnableItems(first: 13) {\n              totalCount\n              edges {\n                node {\n                  ... on Repository {\n                    id\n                    name\n                    url\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }  \n        `\n  });\n  console.log(data);\n  const {\n    user\n  } = data;\n  const repos = user.pinnableItems.edges.map(({\n    node\n  }) => node);\n  return {\n    fallback: 'blocking',\n    paths: repos.map(repo => ({\n      params: {\n        repoId: repo.id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n  const repoId = context.params.repoId; //  const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\n  //  const db = client.db();\n  //  const repoCollection = db.collection('meetups');\n  //  const selectedRepo = await repoCollection.findOne({_id: new ObjectId(repoId)});\n  //  client.close();\n\n  const httpLink = createHttpLink({\n    uri: 'https://api.github.com/graphql'\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`\n      })\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n  const {\n    data\n  } = await client.query({\n    query: gql`\n    {\n      user(login: \"ranjanmanish95\") {\n        pinnableItems(first: 13) {\n          totalCount\n          edges {\n            node {\n              ... on Repository {\n                id\n                name\n                url\n                description\n              }\n            }\n          }\n        }\n      }\n    }  \n    `\n  }); //  console.log(data);\n\n  const {\n    user\n  } = data;\n  const repos = user.pinnableItems.edges.map(({\n    node\n  }) => node);\n  const selectedRepo = repos.find(repo => repo.id === repoId);\n  return {\n    props: {\n      repoData: {\n        id: selectedRepo.id.toString(),\n        name: selectedRepo.name,\n        url: selectedRepo.url,\n        image: \"https://pngimg.com/uploads/github/github_PNG28.png\",\n        description: selectedRepo.description\n      }\n    }\n  };\n}\nexport default RepoDetails;","map":{"version":3,"sources":["C:/Users/ranja/Downloads/autify-assessment/pages/[repoId]/index.js"],"names":["Fragment","RepoDetail","Head","ApolloClient","InMemoryCache","gql","createHttpLink","setContext","RepoDetails","props","repoData","name","description","image","url","getStaticPaths","httpLink","uri","authLink","_","headers","authorization","process","env","GITHUB_ACCESS_TOKEN","client","link","concat","cache","data","query","console","log","user","repos","pinnableItems","edges","map","node","fallback","paths","repo","params","repoId","id","toString","getStaticProps","context","selectedRepo","find"],"mappings":"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","sourcesContent":["import { Fragment } from \"react\";\r\nimport RepoDetail from \"../../components/repositories/RepoDetail\";\r\nimport Head from 'next/head';\r\nimport { ApolloClient, InMemoryCache, gql, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nfunction RepoDetails(props){\r\n    return(\r\n        <Fragment>\r\n        <Head>\r\n        <title>{props.repoData.name}</title>\r\n        <meta \r\n        name=\"description\"\r\n        content={props.repoData.description}\r\n        /> \r\n        </Head>\r\n        <RepoDetail \r\n        image={props.repoData.image}\r\n        name={props.repoData.name}\r\n        url={props.repoData.url}\r\n        description={props.repoData.description}\r\n        />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths(){\r\n    // const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\r\n    // const db = client.db();\r\n    // const repoCollection = db.collection('meetups');\r\n    // const repos = await repoCollection.find({}, {_id: 1}).toArray();\r\n    // client.close();\r\n    const httpLink = createHttpLink({\r\n        uri: 'https://api.github.com/graphql',\r\n      });\r\n      \r\n      const authLink = setContext((_, { headers }) => {\r\n        return {\r\n          headers: {\r\n            ...headers,\r\n            authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\r\n          }\r\n        }\r\n      });\r\n      \r\n      const client = new ApolloClient({\r\n        link: authLink.concat(httpLink),\r\n        cache: new InMemoryCache()\r\n      });\r\n    \r\n    const { data } =  await client.query({\r\n        query: gql`\r\n        {\r\n          user(login: \"ranjanmanish95\") {\r\n            pinnableItems(first: 13) {\r\n              totalCount\r\n              edges {\r\n                node {\r\n                  ... on Repository {\r\n                    id\r\n                    name\r\n                    url\r\n                    description\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }  \r\n        `\r\n      })\r\n     console.log(data);\r\n     const {user} = data;\r\n     const repos = user.pinnableItems.edges.map(({node})=> node);\r\n    return {\r\n        fallback: 'blocking',\r\n        paths: repos.map((repo)=>({\r\n        params:{ repoId: repo.id.toString() } })),\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n    //fetch data for a single meetup\r\n const repoId = context.params.repoId;\r\n//  const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\r\n//  const db = client.db();\r\n//  const repoCollection = db.collection('meetups');\r\n//  const selectedRepo = await repoCollection.findOne({_id: new ObjectId(repoId)});\r\n//  client.close();\r\nconst httpLink = createHttpLink({\r\n    uri: 'https://api.github.com/graphql',\r\n  });\r\n  \r\n  const authLink = setContext((_, { headers }) => {\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\r\n      }\r\n    }\r\n  });\r\n  \r\n  const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\nconst { data } =  await client.query({\r\n    query: gql`\r\n    {\r\n      user(login: \"ranjanmanish95\") {\r\n        pinnableItems(first: 13) {\r\n          totalCount\r\n          edges {\r\n            node {\r\n              ... on Repository {\r\n                id\r\n                name\r\n                url\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }  \r\n    `\r\n  })\r\n//  console.log(data);\r\n const {user} = data;\r\n const repos = user.pinnableItems.edges.map(({node})=> node);\r\n const selectedRepo = repos.find((repo)=>repo.id === repoId);\r\n\r\n    return {\r\n        props:{\r\n            repoData: {\r\n                id: selectedRepo.id.toString(),\r\n                name: selectedRepo.name,\r\n                url: selectedRepo.url,\r\n                image: \"https://pngimg.com/uploads/github/github_PNG28.png\",\r\n                description: selectedRepo.description\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nexport default RepoDetails;"]},"metadata":{},"sourceType":"module"}
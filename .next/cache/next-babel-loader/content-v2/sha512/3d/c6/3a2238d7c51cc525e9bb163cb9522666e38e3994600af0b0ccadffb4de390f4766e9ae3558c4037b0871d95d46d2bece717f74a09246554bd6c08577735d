{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ranja\\\\Downloads\\\\autify-assessment\\\\pages\\\\index.js\";\nimport RepoList from '../components/repositories/RepoList';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\n\nfunction HomePage(_ref) {\n  var pinnableItems = _ref.pinnableItems;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"GitHub Repository with GraphQl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Check my github repository with graphql api integration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(RepoList, {\n      repos: pinnableItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_c = HomePage;\n// export async function getStaticProps(){\n// //fetch data from an API\n// const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\n// const db = client.db();\n// const repoCollection = db.collection('meetups');\n// const repos = await repoCollection.find().toArray();\n// return{\n//     props:{\n//          repos: repos.map((repo)=>({\n//             title: repo.title,\n//             address: repo.address,\n//             image: repo.image,\n//             id: repo._id.toString()\n//          }))\n//     },\n//     revalidate: 1\n// };\n// }\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/ranja/Downloads/autify-assessment/pages/index.js"],"names":["RepoList","Fragment","Head","HomePage","pinnableItems"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,qCAArB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAIA,SAASC,QAAT,OAAkC;AAAA,MAAfC,aAAe,QAAfA,aAAe;AAC9B,sBACA,QAAC,QAAD;AAAA,4BACA,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACA,QAAA,IAAI,EAAC,aADL;AAEA,QAAA,OAAO,EAAC;AAFR;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAQA,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,YARA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAYH;;KAbQD,Q;AAkET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,QAAf","sourcesContent":["import RepoList from '../components/repositories/RepoList';\r\nimport {Fragment} from 'react';\r\nimport Head from 'next/head';\r\nimport { ApolloClient, InMemoryCache, gql, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nfunction HomePage({pinnableItems}){\r\n    return (\r\n    <Fragment>  \r\n    <Head>\r\n      <title>GitHub Repository with GraphQl</title>\r\n      <meta \r\n      name=\"description\"\r\n      content='Check my github repository with graphql api integration'\r\n      />  \r\n    </Head>   \r\n    <RepoList repos={pinnableItems}/>\r\n    </Fragment>  \r\n    )\r\n}\r\n\r\nexport async function getStaticProps(){\r\n\r\n  const httpLink = createHttpLink({\r\n    uri: 'https://api.github.com/graphql',\r\n  });\r\n  \r\n  const authLink = setContext((_, { headers }) => {\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\r\n      }\r\n    }\r\n  });\r\n  \r\n  const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\nconst { data } =  await client.query({\r\n    query: gql`\r\n    {\r\n      user(login: \"ranjanmanish95\") {\r\n        pinnableItems(first: 13) {\r\n          totalCount\r\n          edges {\r\n            node {\r\n              ... on Repository {\r\n                id\r\n                name\r\n                url\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }  \r\n    `\r\n  })\r\n const {user} = data;\r\n const pinnableItems = user.pinnableItems.edges.map(({node})=> node);\r\n  return{\r\n    props:{\r\n      pinnableItems\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// export async function getStaticProps(){\r\n// //fetch data from an API\r\n// const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\r\n// const db = client.db();\r\n// const repoCollection = db.collection('meetups');\r\n// const repos = await repoCollection.find().toArray();\r\n// return{\r\n//     props:{\r\n//          repos: repos.map((repo)=>({\r\n//             title: repo.title,\r\n//             address: repo.address,\r\n//             image: repo.image,\r\n//             id: repo._id.toString()\r\n//          }))\r\n//     },\r\n//     revalidate: 1\r\n// };\r\n// }\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}
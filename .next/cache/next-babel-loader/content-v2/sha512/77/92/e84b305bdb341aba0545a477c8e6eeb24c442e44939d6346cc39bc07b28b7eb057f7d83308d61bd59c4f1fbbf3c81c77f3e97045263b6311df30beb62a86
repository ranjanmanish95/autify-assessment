{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ranja\\\\Downloads\\\\autify-assessment\\\\pages\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport RepoList from '../components/repositories/RepoList';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport { ApolloClient, InMemoryCache, gql, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nfunction HomePage({\n  pinnableItems\n}) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"GitHub Repository with GraphQl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Check my github repository with graphql api integration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(RepoList, {\n      repos: pinnableItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps() {\n  const httpLink = createHttpLink({\n    uri: 'https://api.github.com/graphql'\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`\n      })\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n  const {\n    data\n  } = await client.query({\n    query: gql`\n    {\n      user(login: \"ranjanmanish95\") {\n        pinnableItems(first: 13) {\n          totalCount\n          edges {\n            node {\n              ... on Repository {\n                id\n                name\n                url\n                description\n              }\n            }\n          }\n        }\n      }\n    }  \n    `\n  });\n  const {\n    user\n  } = data;\n  const pinnableItems = user.pinnableItems.edges.map(({\n    node\n  }) => node);\n  return {\n    props: {\n      pinnableItems\n    }\n  };\n} // export async function getStaticProps(){\n// //fetch data from an API\n// const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\n// const db = client.db();\n// const repoCollection = db.collection('meetups');\n// const repos = await repoCollection.find().toArray();\n// return{\n//     props:{\n//          repos: repos.map((repo)=>({\n//             title: repo.title,\n//             address: repo.address,\n//             image: repo.image,\n//             id: repo._id.toString()\n//          }))\n//     },\n//     revalidate: 1\n// };\n// }\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/ranja/Downloads/autify-assessment/pages/index.js"],"names":["RepoList","Fragment","Head","ApolloClient","InMemoryCache","gql","createHttpLink","setContext","HomePage","pinnableItems","getStaticProps","httpLink","uri","authLink","_","headers","authorization","process","env","GITHUB_ACCESS_TOKEN","client","link","concat","cache","data","query","user","edges","map","node","props"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,qCAArB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,EAA2CC,cAA3C,QAAiE,gBAAjE;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAAkC;AAC9B,sBACA,QAAC,QAAD;AAAA,4BACA,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACA,QAAA,IAAI,EAAC,aADL;AAEA,QAAA,OAAO,EAAC;AAFR;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAQA,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,YARA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAYH;;AAED,OAAO,eAAeC,cAAf,GAA+B;AAEpC,QAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC9BM,IAAAA,GAAG,EAAE;AADyB,GAAD,CAA/B;AAIA,QAAMC,QAAQ,GAAGN,UAAU,CAAC,CAACO,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C,WAAO;AACLA,MAAAA,OAAO,kCACFA,OADE;AAELC,QAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,mBAAoB;AAFpD;AADF,KAAP;AAMD,GAP0B,CAA3B;AASA,QAAMC,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BkB,IAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADwB;AAE9BY,IAAAA,KAAK,EAAE,IAAInB,aAAJ;AAFuB,GAAjB,CAAf;AAKF,QAAM;AAAEoB,IAAAA;AAAF,MAAY,MAAMJ,MAAM,CAACK,KAAP,CAAa;AACjCA,IAAAA,KAAK,EAAEpB,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBqC,GAAb,CAAxB;AAqBC,QAAM;AAACqB,IAAAA;AAAD,MAASF,IAAf;AACA,QAAMf,aAAa,GAAGiB,IAAI,CAACjB,aAAL,CAAmBkB,KAAnB,CAAyBC,GAAzB,CAA6B,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAWA,IAAxC,CAAtB;AACC,SAAM;AACJC,IAAAA,KAAK,EAAC;AACJrB,MAAAA;AADI;AADF,GAAN;AAKD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeD,QAAf","sourcesContent":["import RepoList from '../components/repositories/RepoList';\r\nimport {Fragment} from 'react';\r\nimport Head from 'next/head';\r\nimport { ApolloClient, InMemoryCache, gql, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nfunction HomePage({pinnableItems}){\r\n    return (\r\n    <Fragment>  \r\n    <Head>\r\n      <title>GitHub Repository with GraphQl</title>\r\n      <meta \r\n      name=\"description\"\r\n      content='Check my github repository with graphql api integration'\r\n      />  \r\n    </Head>   \r\n    <RepoList repos={pinnableItems}/>\r\n    </Fragment>  \r\n    )\r\n}\r\n\r\nexport async function getStaticProps(){\r\n\r\n  const httpLink = createHttpLink({\r\n    uri: 'https://api.github.com/graphql',\r\n  });\r\n  \r\n  const authLink = setContext((_, { headers }) => {\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\r\n      }\r\n    }\r\n  });\r\n  \r\n  const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\nconst { data } =  await client.query({\r\n    query: gql`\r\n    {\r\n      user(login: \"ranjanmanish95\") {\r\n        pinnableItems(first: 13) {\r\n          totalCount\r\n          edges {\r\n            node {\r\n              ... on Repository {\r\n                id\r\n                name\r\n                url\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }  \r\n    `\r\n  })\r\n const {user} = data;\r\n const pinnableItems = user.pinnableItems.edges.map(({node})=> node);\r\n  return{\r\n    props:{\r\n      pinnableItems\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// export async function getStaticProps(){\r\n// //fetch data from an API\r\n// const client = await MongoClient.connect('mongodb+srv://ranjanmanish:91101265020m@cluster0.xlizp.mongodb.net/autify?retryWrites=true&w=majority');\r\n// const db = client.db();\r\n// const repoCollection = db.collection('meetups');\r\n// const repos = await repoCollection.find().toArray();\r\n// return{\r\n//     props:{\r\n//          repos: repos.map((repo)=>({\r\n//             title: repo.title,\r\n//             address: repo.address,\r\n//             image: repo.image,\r\n//             id: repo._id.toString()\r\n//          }))\r\n//     },\r\n//     revalidate: 1\r\n// };\r\n// }\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}